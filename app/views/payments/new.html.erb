
<div class="container">
  <div id="paymentBrick_container"></div>
   <% <div id="walletBrick_container"></div> %>
</div>

<script>
  const mp = new MercadoPago('<%= Rails.application.credentials.mercado_pago["public_key"] %>', { locale: 'pt-BR' });

  const bricksBuilder = mp.bricks();
  const renderPaymentBrick = async (bricksBuilder) => {
    const settings = {
      initialization: {
        amount: '<%= @price %>', // Substitua pelo valor correto (em centavos, ex.: R$100,00 -> 10000)
        preferenceId: '<%= @preference_id %>', // Use a variável criada no controller
        payer: {
          firstName: "tester um",
          lastName: "teste dois",
          email: "test@test.com"
        }
      },
      customization: {
        visual: {
          style: {
            theme: "bootstrap",
          },
        },
        paymentMethods: {
          creditCard: "all",
          debitCard: "all",
          bankTransfer: "all",
          // atm: "all",
          maxInstallments: 1
        },
        backUrls: {
          'error': 'http://localhost:3000/payments/new',
          'return': 'http://localhost:3000/status_payment/'
        }
      },
      callbacks: {
        onReady: () => {
            /*
             Callback chamado quando o Brick está pronto.
             Aqui, você pode ocultar seu site, por exemplo.
            */
          },
        onSubmit: ({ selectedPaymentMethod, formData }) => {
          return new Promise((resolve, reject) => {
            fetch("<%= payments_process_payment_path %>", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "<%= form_authenticity_token %>",
              },
              body: JSON.stringify(formData),
            })
              .then((response) => response.json())
              .then((response) => {
                // Exibir status do pagamento (redirecionar, mostrar mensagem, etc.)
                window.location.href = `http://localhost:3000/status_payment/${response.payment_id}`;
                console.log("Pagamento processado: ", response);
                resolve();
              })
              .catch((error) => {
                // console.log(error);
                // console.log("aqui no erro");
                console.log(response);
                // ta caindo aqui dentro por algum motivo
                console.error("Erro ao processar pagamento: ", error);
                reject();
              });
          });
        },
        onError: (error) => {
          console.error("Erro no Payment Brick: ", error);
        },
      },
    };

    window.paymentBrickController = await bricksBuilder.create(
      "payment",
      "paymentBrick_container",
      settings
    );
  };

  renderPaymentBrick(bricksBuilder);
</script>
