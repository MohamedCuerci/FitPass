<div class="container">
  <div id="loading-payment" class="text-center p-4">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Carregando...</span>
    </div>
  </div>

  <div id="paymentBrick_container" style="display: none;"></div>
</div>

<script>
  const renderPaymentBrick = async (bricksBuilder) => {
    const loadingElement = document.getElementById('loading-payment');
    const paymentContainer = document.getElementById('paymentBrick_container');

    const settings = {
      initialization: {
        amount: '<%= @price %>', // Substitua pelo valor correto (em centavos, ex.: R$100,00 -> 10000)
        preferenceId: '<%= @preference_id %>', // Use a variável criada no controller
        payer: {
          firstName: "tester um",
          lastName: "teste dois",
          email: "test@test.com"
        }
      },
      customization: {
        visual: {
          style: {
            theme: "bootstrap",
          },
        },
        paymentMethods: {
          creditCard: "all",
          debitCard: "all",
          bankTransfer: "all",
          // atm: "all",
          maxInstallments: 1
        }
      },
      callbacks: {
        onReady: () => {
          /*
            Callback chamado quando o Brick está pronto.
            Aqui, você pode ocultar seu site, por exemplo.
          */
          loadingElement.style.display = 'none';
          paymentContainer.style.display = 'block';
        },
        onSubmit: ({ selectedPaymentMethod, formData }) => {
          return new Promise((resolve, reject) => {
            fetch("<%= payments_process_payment_path %>", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": "<%= form_authenticity_token %>",
              },
              body: JSON.stringify(formData),
            })
              .then((response) => response.json())
              .then((response) => {
                if (response.status === 'success' && response.redirect_url) {
                  window.location.href = response.redirect_url;
                  resolve();
                } else {
                  // console.error("Erro na resposta:", response);
                  reject(response.error || "Erro desconhecido");
                }
              })
              .catch((error) => {
                // console.error("Erro na requisição:", error);
                reject(error);
              });
          });
        },
        onError: (error) => {
          console.error("Erro no Payment Brick: ", error);
        },
      },
    };

    window.paymentBrickController = await bricksBuilder.create(
      "payment",
      "paymentBrick_container",
      settings
    );
  };

  document.addEventListener('DOMContentLoaded', () => {
    const mp = new MercadoPago('<%= Rails.application.credentials.mercado_pago["public_key"] %>', { locale: 'pt-BR' });
    const bricksBuilder = mp.bricks();
    renderPaymentBrick(bricksBuilder);
  });
</script>
